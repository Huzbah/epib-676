---
title: "Assignment 1: Decision trees and cost-effectiveness"
author: "YOUR NAME HERE"
date: today
format:
    html:
      toc: true
editor: visual
---

# Section 1: Decision trees

We'll use the [rdecision package](https://cran.r-project.org/web/packages/rdecision/index.html) to develop and visualize decision trees. There are multiple vignettes on the CRAN page; [this introductory one](https://cran.rstudio.com/web/packages/rdecision/vignettes/DT00-DecisionTreeTutorial.html) will probably be sufficient.

## 1a Expected value calculations

To help you use the package and make sure you understand the way to calculate the expected value, I'll first make a simple tree, visualize it, and "roll it back"

Just review and run this code; you don't have to change anything.

```{r}
#install.packages("rdecision") #uncomment and run once if you haven't installed it
library(rdecision)
library(flextable)

# Decision problem: Diet or excercise to reduce chance of needing a stent: which is cost-saving?

# Parameters
c_diet <- 50 #cost of diet
c_excercise <- 750 #cost of exercise
c_stent <- 5000 #cost of a stent
u_stent <- 0.75 #utility of a stent (relative to 1.0)
p_stent_diet <- (68 - 12)/68
p_stent_exercise <- (58 - 18)/58

#Model using rdecision package

#Create decision and chance nodes
decision_node <- DecisionNode$new("Diet or excercise")
chance_node_diet <- ChanceNode$new("Stent?")
chance_node_exercise <- ChanceNode$new("Stent?")

#Create leaf nodes
leaf_node_diet_no_stent <- LeafNode$new("No stent")
leaf_node_diet_stent <- LeafNode$new("Stent", utility = u_stent)
leaf_node_exercise_no_stent <- LeafNode$new("No stent")
leaf_node_exercise_stent <- LeafNode$new("Stent", utility = u_stent)

#Create 'actions', paths from your decision node(s)
action_diet <- Action$new(
  decision_node, chance_node_diet, cost = c_diet, label = "Diet"
)
action_exercise <- Action$new(
  decision_node, chance_node_exercise, cost = c_excercise, label = "Exercise"
)

#Create 'reactions', paths from your chance node(s)
reaction_diet_success <- Reaction$new(
  chance_node_diet, leaf_node_diet_no_stent, 
  p = 1-p_stent_diet, cost = 0.0, label = "Did not need stent")

reaction_diet_failure <- Reaction$new(
  chance_node_diet, leaf_node_diet_stent, 
  p = p_stent_diet, cost = c_stent, label = "Needed stent")

reaction_exercise_success <- Reaction$new(
  chance_node_exercise, leaf_node_exercise_no_stent, 
  p = 1-p_stent_exercise, cost = 0.0, label = "Did not need stent")

reaction_exercise_failure <- Reaction$new(
  chance_node_exercise, leaf_node_exercise_stent, 
  p = p_stent_exercise, cost = 5000.0, label = "Needed stent")

#Create, draw, and evaluate the tree
DT1 <- DecisionTree$new(
  V = list(decision_node, #verticies (nodes)
           chance_node_diet, 
           chance_node_exercise, 
           leaf_node_diet_no_stent, 
           leaf_node_diet_stent, 
           leaf_node_exercise_no_stent, 
           leaf_node_exercise_stent),
  E = list(action_diet, #edges
           action_exercise,
           reaction_diet_success,
           reaction_diet_failure,
           reaction_exercise_success,
           reaction_exercise_failure)
)

DT1$draw()

DT1_evaluation <- DT1$evaluate()
DT1_evaluation |> flextable()
```

In the code chunk below, using the variables defined in the last code chunk (e.g., `p_stent_diet`), calculate the expected utility and expected cost of the diet arm without the `rdecision` package (simple summing/multiplying).

```{r}
expected_cost_diet <- NA
expected_utility_diet <- NA
```

## 1b Build peptic ulcer closure decision model

You will now develop a decision analysis to help determine whether a newer clip should be used to close bleeding peptic ulcers in the gastrointestinal tract during an upper GI encoscopy, or EGD (stands for esophagogastroduodenoscopy). The newer clips are called over-the-scope clips, abbreviated OTSc or OTS clip. Randomized trial data show that rebleeding rates are lower following endoscopic closure with OTSc as compared to when standard therapy clips are used, but OTSc are significantly more expensive. You will build a decision tree to determine whether OTSc are 'worth' the added expense, either as a first line therapy (i.e. to treat all peptic ulcer bleeds initially) or only for rebleeds (i.e.Â only if a standard therapy clip failed, resulting in a 'rebleed').

We assume all peptic ulcer bleeds are fully resolved during a short hospitalization and therefore our analysis uses a time horizon of only 30 days. No discounting is needed due to the short time horizon. Because this analysis involves very small differences in utility, our parameters are in quality-adjusted life days (QALDs) instead of quality-adjusted life years (QALYs); 1 QALD = 1/365 QALY.

All model parameters are provided for you in the file `parameters_OTSc.xlsx`, feel free to open it to take a look. For your assignment to render without error, this .csv file must be in the same folder as the assignment .qmd file. This chunk of code reads in the .csv file and generates a parameter table, using the flextable package for formatting (you don't have to do anything in this code chunk).

NOTE: You might need to close the Excel file for the read_excel function to run properly.

```{r}
library(readxl) #read in excel files; install it if you don't have it using install.packages("readxl")
library(flextable) #formatting tables for display (https://davidgohel.github.io/flextable/reference/index.html)

#read table from Excel
t_params <- read_excel('params_assign1.xlsx', sheet = "OTSc")
#Display it nicely
t_params |>
  flextable() |> #turn into flextable object
  merge_v(j=1) |> #Merge cells in first column with same value (group probabilities, costs, etc.)
  theme_box() |> #Apply a theme for aesthetics
  autofit() #automatically set column widths to reasonable values
```

In the code chunk below, build the model using the rdecision package with the 'base_case' value for each parameter (we won't be using the 'lower_bound' or 'upper_bound' columns for anything in this problem set).

Your model should start with a decision mode with three options:

-    **OTSc first:** use OTS clip for the initial closure; if a rebleed occurs use a standard clip

-   **ST first:** use a standard clip for the initial closure; if a rebleed occurs use an OTS clip

-   **ST only**: use a standard clip for the initial closure and again if a rebleed occurs.

For all three arms from this decision node ("actions" in rdecision package), you will incur the cost of whichever clip was used first (`c_Stclip` or `c_OTS`). For calculating the QALDs experienced over our 30-day time h and the disutility associated with an EGH (`u_EGD`).

All three arms lead to a chance node with two possibilities:

-   **Success:** the initial procedure was a success. You incur the cost of a hospitalization without complications or comorbidities (`c_hosp_noCC`). This is a leaf node (no more chances/decisions)

-   **Further bleeding; 2nd-line EGD:** The EGD needs to be redone. You incur the cost of whichever clip is used for second-line closure (`c_STclip` or `c_OTS`) under that arm, and have additional disutility of `u_double_EGD`.

After second-line therapy, you have another chance node with two possibilities:

-   **Success:** second line therapy worked. You incur the cost of a hospitalization with minor complications and comorbidies (`c_hosp_CC`). This is a leaf node.

-   **Further bleeding; IR procedure:** After 2 failed EGDs, patients undergo an interventional radiology procedure. You incur the cost of a hospitalization with major complications and comorbidies plus a physician fee for the interventional radiologist (`c_hosp_MCC + c_IR_MD`). You also incur additional a disutility associated with the IR procedure `u_IR`. This is also a leaf node.

It may be helpful to draw the tree and where the variables are used before you start coding it.

```{r}
# I like to turn the parameters from my table into  a named list
# Then I can refer to the parameter I want by, e.g., `params$c_OTS`
params <- as.list(t_params$base_case)
names(params) <- t_params$name

#Create decision and chance nodes

#Create leaf nodes

#Create 'actions', paths from your decision node(s)

#Create 'reactions', paths from your chance node(s)

#Create and draw the tree


# Create table with the expected cost and utility (in QALYs or QALD) of each alternative

```

Using a willingness to pay threshold of \$50,000 per QALY (\$137 per QALD), indicate whether each intervention is dominated with strong dominance, Dominated by extended dominant, not cost-effective, or preferred (exactly one intervention should be preferred).

> ST only:
>
> ST then OTSc:
>
> OTSc then ST:

In case you're curious, this is a slightly simplified version of [a paper I published during my PhD](https://doi.org/10.1016/j.giec.2019.09.004).

# Section 2: Economic evaluation

## 2a Discounting

The vector `costs_by_year` represents costs by year, starting with year 0 (this year). Calculate the net present cost with an annual discount rate of 2% and of 5%.

```{r}

costs_by_year <- c(100, 200, 500, 350, 700) #costs 0, 1, 2, 3, and 4 years into the future


npc_2percent <- NA #Calculate the net present cost with a discount rate of 2 percent

npc_5percent <- NA #Calculate the net present cost with a discount rate of 5 percent

```

## 2b Incremental analysis

In this section, we'll use lots of loops to conduct incremental analysis- the process of removing any dominated strategies and calculating the incremental cost-effectiveness ratios (ICERs) of the remaining non-dominated strategies. Coding this yourself should give you a strong understanding of the concept. Let's get started!

First, I've written the code for you that reads in data on 9 different strategies we wish to compare. For each one, we have the estimated QALYs experienced and the estiamted cost to the insurer, the patient, and to productivity.

```{r}
#read table from Excel
t_CE <- read_excel('params_assign1.xlsx', sheet = "CEdata")
#Display it nicely
t_CE |>
  flextable() |> #turn into flextable object
  theme_box() |> #Apply a theme for aesthetics
  autofit() #automatically set column widths to reasonable values

```

In this code chunk, you'll calculate the cost-effectiveness from the insurer's perspective (only including `Cost_insurer`). First, we detect any strategies that are dominated by strong dominance or extended dominance. Then, we calcualte the ICERs between all non-dominated interventions.

```{r}

#Create table with columns "strategy", "QALYs", and "Cost", where cost is the Cost_insurer. We'll add two columns, one for whether the strategy is dominated and another for putting the ICERS for non-dominated interventions
t_CE_insurer <- data.frame(
  Strategy = t_CE$Strategy,
  QALYs = t_CE$QALYs,
  Cost = t_CE$Cost_insurer,
  Dominated = "No",
  ICER = 0.0
)

#Sort t_CE_insurer ascending by QALYs (from low to high)
#t_CE_insurer <- 
t_CE_insurer <- t_CE_insurer[order(t_CE_insurer$QALYs), ]

# Loop over each row to determine if the strategy is dominated by strong dominance. 
# If so, replace the value in the 'Dominated' column with 'Strong'
for (i in 1:(nrow(t_CE_insurer) - 1)){
  #Compare the cost in row (i+1) to the current row.
  #  write "Strong" in the dominated column if applicable
  if (t_CE_insurer[i+1, "Cost"] < t_CE_insurer[i, "Cost"]){
    t_CE_insurer[i, "Dominated"] <- "Strong"
  }
}

# Loop over each non-dominated strategy to determine if the strategy is dominated by extended dominance. 
# If so, replace the value in the 'Dominated' column with 'Extended'.
#Note: For extended dominance, we need to keep looping until we 
# do a pass without identifying any dominates interventions
stop = T #Stop looping; set to false if we find any dominated interventions
while(stop==F){
  #Get the row index for all rows that aren't dominated
  idx_nondom_rows <- as.numeric(rownames(t_CE_insurer[t_CE_insurer$Dominated=="No",]))
  #Get number of nondom rows
  n_nondom <- length(idx_nondom_rows)
  for (j in 2:(n_nondom - 1)){
    #Compute ICER compared to last non-dominated strategy
    
    #If ICER this strategy > ICER last strategy, last strategy extended dominated
  }
  
}

#Calculate ICERs between 

```

## Identifying maximum net monetary benefit

Calculate NBM at a range of WTP thresholds and then plot
